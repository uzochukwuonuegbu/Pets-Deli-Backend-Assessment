service: pets-deli
description: An Assessment for a backend engineer role by Pets Deli

custom:
  accountId: ${ file(serverless.env.yml):${self:custom.stage}.ACCOUNT_ID }
  stage: ${opt:stage, self:provider.stage}
  tableThroughputs:
    prod: 30
    staging: 5
    dev: 1
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  DataTableName: ${self:service}-${self:provider.stage}-data
  pseudoParameters:
    skipRegionReplace: false
  dynamodb:
    start:
      port: 8000
      dbPath: './.dynamodb'
      migrate: true
      seed: true
    stages:
      - ${self:provider.stage}
  prune:
    automatic: true
    number: 5
  
  documentation:
    models:
      - name: OnClickEventRequest
        contentType: 'application/json'
        schema: ${file(src/common/validators/onClickEvent.yml)}
      - name: 400JsonResponse
        contentType: 'application/json'
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
      - name: OnClickEventResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            result:
              type: string
  commonModelSchemaFragments:
    MethodResponse400Json:
      statusCode: '400'
      responseModels:
        "application/json": 400JsonResponse

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  # profile: dev
  environment: ${file(serverless.env.yml):${self:custom.stage}, file(serverless.env.yml):default}
  apiKeys:
    - PETS_DELI_API_KEY_${self:custom.stage}
  apiGateway:
    apiKeySourceType: HEADER
  ManagedPolicyArns:
    - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: Allow
      Action:
        - s3:GetBucketLocation
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [DataTable, Arn]
        - Fn::Join:
          - '/'
          - - 'Fn::GetAtt': [DataTable, Arn]
            - 'index/*'

functions:
  onClickEvent:
    handler: src/handler/onClickEvents.CreateOnClickEvent
    events:
      - http:
          documentation:
            summary: "OnClickEvent"
            description: "OnClickEvent"
            requestModels:
              "application/json": OnClickEventRequest
          method: post
          path: onClick
          private: true
          cors: true
          reqValidatorName: bodyOnly
          methodResponses:
            - statusCode: '200'
              responseModels:
                "application/json": OnClickEventResponse
            - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  userClickEvents:
    handler: src/handler/onClickEvents.GetUserClickEvents
    events:
      - http:
          method: get
          path: userClicks
          private: true
          cors: true
Outputs:
  Region:
    Value:
      Ref: 'AWS::Region'
  DataTableArn:
    Value:
      Fn::GetAtt: [DataTable, Arn]
    Export:
      Name: ${self:provider.stage}-DataTableArn

resources:
  - ${file(resources/dataTable.yml)}
  - ${file(resources/requestValidators.yml)}

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-cognito-add-custom-attributes
  - serverless-prune-plugin
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
